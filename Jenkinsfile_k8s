pipeline {
  triggers {
    // Build once per day if not a Pull Request or not a tag build
    cron(env.CHANGE_ID || env.TAG_NAME ? '' : '@daily')
  }

  agent none

  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
    timeout(time: 1, unit: 'HOURS')
    disableConcurrentBuilds()
    parallelsAlwaysFailFast()
    ansiColor('xterm')
  }

  environment {
    // https://www.terraform.io/docs/cli/config/environment-variables.html#tf_in_automation
    TF_IN_AUTOMATION = '1'
    // https://www.terraform.io/docs/cli/config/environment-variables.html#tf_input
    TF_INPUT = '0'
  }

  stages {
    stage('Check') {
      parallel {
        stage('Staging') {
          when {
            // The tests on staging environment runs on a PR, or on the daily cron job
            anyOf {
              changeRequest()
              triggeredBy 'TimerTrigger'
            }
          }
          agent {
            kubernetes {
              yamlFile 'ci-pod-template.yml'
              defaultContainer('terraform')
            }
          }
          environment {
            AWS_ACCESS_KEY_ID = credentials("ci-terraform-access-key")
            AWS_SECRET_ACCESS_KEY = credentials("ci-terraform-secret-key")
            BACKEND_CONFIG_FILE = credentials("ci-terraform-backend-config")
          }
          stages {
            stage('üßπ Prepare Terraform for Staging Environment') {
              steps {
                sh 'make prepare'
              }
            }
            stage('üîé Validate Terraform for Staging Environment') {
              steps {
                sh 'make validate'
              }
            }
            stage('‚úÖ Test Terraform Project') {
              steps {
                sh 'make tests'
              }
            }
          }
        }
        stage('Production') {
          agent {
            kubernetes {
              yamlFile 'ci-pod-template.yml'
              defaultContainer('terraform')
            }
          }
          environment {
            AWS_ACCESS_KEY_ID = credentials("production-terraform-access-key")
            AWS_SECRET_ACCESS_KEY = credentials("production-terraform-secret-key")
            BACKEND_CONFIG_FILE = credentials("production-terraform-backend-config")
          }
          stages {
            stage('ü¶Ö Generate Terraform Plan') {
              environment {
                // When the job is triggered by the daily cron timer, then the plan succeed only if there is no changes found (e.g. no config drift)
                // For all other triggers, the plan succeed either there are changes or not
                TF_CLI_ARGS_plan="${currentBuild.getBuildCauses('hudson.triggers.TimerTrigger$TimerTriggerCause') ? '-detailed-exitcode' : ''}"
              }
              steps {
                sh 'make plan > terraform-plan-for-humans.txt'
              }
              post {
                always {
                  archiveArtifacts 'terraform-plan-for-humans.txt'
                }
              }
            }
            stage('üó£ Notify User on the PR ') {
              when {
                changeRequest()
              }
              steps {
                publishChecks name: "terraform-plan",
                  title: "Terraform Plan for this Change Request",
                  text: "The terraform plan for this change request can be found at <${env.BUILD_URL}artifact/terraform-plan-for-humans.txt>.",
                  detailsURL: "${env.BUILD_URL}artifact/terraform-plan-for-humans.txt"
              }
            }
            stage("‚è≥ Waiting for User Manual Approval") {
              agent none
              when {
                // The Wait for human input is only required when a user manually launched the pipeline on the main branch
                allOf {
                  branch 'main'
                  triggeredBy 'UserIdCause'
                }
              }
              steps {
                input message: "Should we apply these changes to production?", ok: "üö¢ Yes, ship it!"
              }
            }
            stage('üö¢ Shipping Changes') {
              when {
                allOf {
                  branch 'main'
                  not { triggeredBy 'TimerTrigger' }
                }
              }
              steps {
                sh 'make deploy'
              }
            }
          }
        } // stage('Production')
      }
    } // stage('Check')
  }
}
